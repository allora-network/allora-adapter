/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  EvenFeeHandler,
  EvenFeeHandlerInterface,
  EvenFeeHandlerConstructorArgsStruct,
} from "../EvenFeeHandler";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "args",
        type: "tuple",
        internalType: "struct EvenFeeHandlerConstructorArgs",
        components: [
          {
            name: "admin",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "acceptOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "claimFees",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "feedOwnerPortion",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "feesAccrued",
    inputs: [
      {
        name: "feeReciever",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "feesAccrued",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "handleFees",
    inputs: [
      {
        name: "feedOwner",
        type: "address",
        internalType: "address",
      },
      {
        name: "feeReceivers",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pendingOwner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateFeedOwnerPortion",
    inputs: [
      {
        name: "feedOwnerPortion_",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "AlloraConsumerEvenFeeHandlerAdminUpdatedFeedOwnerFeePortion",
    inputs: [
      {
        name: "feedOwnerPortion",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "AlloraConsumerEvenFeeHandlerFeesClaimed",
    inputs: [
      {
        name: "claimer",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "fees",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "AlloraConsumerEvenFeeHandlerFeesHandled",
    inputs: [
      {
        name: "fee",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "feeReceivers",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferStarted",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AlloraConsumerEvenFeeHandlerEthTransferFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "AlloraConsumerEvenFeeHandlerFeeTooLow",
    inputs: [],
  },
  {
    type: "error",
    name: "AlloraConsumerEvenFeeHandlerInvalidFeedOwnerFeePortion",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60806040526702c68af0bb14000060025534801561001c57600080fd5b50604051610b89380380610b8983398101604081905261003b916100c1565b61004433610055565b805161004f90610055565b50610126565b600180546001600160a01b031916905561006e81610071565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100d357600080fd5b604051602081016001600160401b038111828210171561010357634e487b7160e01b600052604160045260246000fd5b60405282516001600160a01b038116811461011d57600080fd5b81529392505050565b610a54806101356000396000f3fe6080604052600436106100915760003560e01c8063953eb1c711610059578063953eb1c7146101305780639cca923814610150578063d294f0931461017d578063e30c397814610192578063f2fde38b146101b057600080fd5b80632c306f88146100965780633460ac1c146100ab578063715018a6146100d457806379ba5097146100e95780638da5cb5b146100fe575b600080fd5b6100a96100a43660046107f3565b6101d0565b005b3480156100b757600080fd5b506100c160025481565b6040519081526020015b60405180910390f35b3480156100e057600080fd5b506100a9610314565b3480156100f557600080fd5b506100a9610328565b34801561010a57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016100cb565b34801561013c57600080fd5b506100a961014b3660046108d4565b6103a7565b34801561015c57600080fd5b506100c161016b3660046108ed565b60036020526000908152604090205481565b34801561018957600080fd5b506100a9610414565b34801561019e57600080fd5b506001546001600160a01b0316610118565b3480156101bc57600080fd5b506100a96101cb3660046108ed565b610469565b3460008190036101e05750505050565b6103e88110156102035760405163128267e560e31b815260040160405180910390fd5b600254600061021b8383670de0b6b3a76400006104da565b905060008551828561022d919061091e565b610237919061094d565b6001600160a01b03881660009081526003602052604081208054929350849290919061026490849061096f565b90915550600090505b86518110156102d157816003600089848151811061028d5761028d610982565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546102c4919061096f565b909155505060010161026d565b507f90c57407135af9d9590a49584e3d995c1f4d8a8c33e35ac796b16eb15fba3ef08487604051610303929190610998565b60405180910390a150505050505050565b61031c6105ca565b6103266000610624565b565b60015433906001600160a01b0316811461039b5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b6103a481610624565b50565b6103af6105ca565b670de0b6b3a76400008111156103d8576040516358d65b7d60e11b815260040160405180910390fd5b60028190556040518181527f56dfb88b69b70f28fcde14cfa158c3db20f27157520465e6e79212b0f3bff44b906020015b60405180910390a150565b336000818152600360205260408120805491905590610433908261063d565b60408051338152602081018390527f6ddf11b47ba152758e034711d6be3cf7940726e87b2556b2ff2567d067208baf9101610409565b6104716105ca565b600180546001600160a01b0383166001600160a01b031990911681179091556104a26000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60008080600019858709858702925082811083820303915050806000036105145783828161050a5761050a610937565b04925050506105c3565b80841161055b5760405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606401610392565b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b6000546001600160a01b031633146103265760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610392565b600180546001600160a01b03191690556103a4816106d0565b604080516000808252602082019092526001600160a01b03841690839060405161066791906109ef565b60006040518083038185875af1925050503d80600081146106a4576040519150601f19603f3d011682016040523d82523d6000602084013e6106a9565b606091505b50509050806106cb5760405163396ff88d60e11b815260040160405180910390fd5b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461073757600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561077b5761077b61073c565b604052919050565b600082601f83011261079457600080fd5b813567ffffffffffffffff8111156107ae576107ae61073c565b6107c1601f8201601f1916602001610752565b8181528460208386010111156107d657600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561080857600080fd5b61081184610720565b925060208085013567ffffffffffffffff8082111561082f57600080fd5b818701915087601f83011261084357600080fd5b8135818111156108555761085561073c565b8060051b610864858201610752565b918252838101850191858101908b84111561087e57600080fd5b948601945b838610156108a35761089486610720565b82529486019490860190610883565b975050505060408701359250808311156108bc57600080fd5b50506108ca86828701610783565b9150509250925092565b6000602082840312156108e657600080fd5b5035919050565b6000602082840312156108ff57600080fd5b6105c382610720565b634e487b7160e01b600052601160045260246000fd5b8181038181111561093157610931610908565b92915050565b634e487b7160e01b600052601260045260246000fd5b60008261096a57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561093157610931610908565b634e487b7160e01b600052603260045260246000fd5b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156109e25784516001600160a01b0316835293830193918301916001016109bd565b5090979650505050505050565b6000825160005b81811015610a1057602081860181015185830152016109f6565b50600092019182525091905056fea264697066735822122019753bef73cbf0a8301cf11c733eeac532c3691897f5d376c6de2dc8b782b0e564736f6c63430008150033";

type EvenFeeHandlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EvenFeeHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EvenFeeHandler__factory extends ContractFactory {
  constructor(...args: EvenFeeHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    args: EvenFeeHandlerConstructorArgsStruct,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(args, overrides || {});
  }
  override deploy(
    args: EvenFeeHandlerConstructorArgsStruct,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(args, overrides || {}) as Promise<
      EvenFeeHandler & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): EvenFeeHandler__factory {
    return super.connect(runner) as EvenFeeHandler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EvenFeeHandlerInterface {
    return new Interface(_abi) as EvenFeeHandlerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): EvenFeeHandler {
    return new Contract(address, _abi, runner) as unknown as EvenFeeHandler;
  }
}
