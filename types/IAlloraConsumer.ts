/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type NetworkInferenceDataStruct = {
  networkInference: BigNumberish;
  timestamp: BigNumberish;
  topicId: BigNumberish;
  confidenceIntervalLowerBound: BigNumberish;
  confidenceIntervalUpperBound: BigNumberish;
  extraData: BytesLike;
};

export type NetworkInferenceDataStructOutput = [
  networkInference: bigint,
  timestamp: bigint,
  topicId: bigint,
  confidenceIntervalLowerBound: bigint,
  confidenceIntervalUpperBound: bigint,
  extraData: string
] & {
  networkInference: bigint;
  timestamp: bigint;
  topicId: bigint;
  confidenceIntervalLowerBound: bigint;
  confidenceIntervalUpperBound: bigint;
  extraData: string;
};

export type TopicValueStruct = {
  recentValue: BigNumberish;
  recentValueTime: BigNumberish;
  recentConfidenceIntervalLowerBound: BigNumberish;
  recentConfidenceIntervalUpperBound: BigNumberish;
};

export type TopicValueStructOutput = [
  recentValue: bigint,
  recentValueTime: bigint,
  recentConfidenceIntervalLowerBound: bigint,
  recentConfidenceIntervalUpperBound: bigint
] & {
  recentValue: bigint;
  recentValueTime: bigint;
  recentConfidenceIntervalLowerBound: bigint;
  recentConfidenceIntervalUpperBound: bigint;
};

export type AlloraConsumerNetworkInferenceDataStruct = {
  signature: BytesLike;
  networkInference: NetworkInferenceDataStruct;
  extraData: BytesLike;
};

export type AlloraConsumerNetworkInferenceDataStructOutput = [
  signature: string,
  networkInference: NetworkInferenceDataStructOutput,
  extraData: string
] & {
  signature: string;
  networkInference: NetworkInferenceDataStructOutput;
  extraData: string;
};

export interface IAlloraConsumerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getNetworkInferenceMessage"
      | "getTopicValue"
      | "verifyNetworkInference"
      | "verifyNetworkInferenceViewOnly"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getNetworkInferenceMessage",
    values: [NetworkInferenceDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopicValue",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyNetworkInference",
    values: [AlloraConsumerNetworkInferenceDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyNetworkInferenceViewOnly",
    values: [AlloraConsumerNetworkInferenceDataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getNetworkInferenceMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopicValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyNetworkInference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyNetworkInferenceViewOnly",
    data: BytesLike
  ): Result;
}

export interface IAlloraConsumer extends BaseContract {
  connect(runner?: ContractRunner | null): IAlloraConsumer;
  waitForDeployment(): Promise<this>;

  interface: IAlloraConsumerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getNetworkInferenceMessage: TypedContractMethod<
    [networkInferenceData: NetworkInferenceDataStruct],
    [string],
    "view"
  >;

  getTopicValue: TypedContractMethod<
    [topicId: BigNumberish, extraData: BytesLike],
    [TopicValueStructOutput],
    "view"
  >;

  verifyNetworkInference: TypedContractMethod<
    [nd: AlloraConsumerNetworkInferenceDataStruct],
    [
      [bigint, bigint, bigint, string] & {
        networkInference: bigint;
        confidenceIntervalLowerBound: bigint;
        confidenceIntervalUpperBound: bigint;
        aggregator: string;
      }
    ],
    "nonpayable"
  >;

  verifyNetworkInferenceViewOnly: TypedContractMethod<
    [nd: AlloraConsumerNetworkInferenceDataStruct],
    [
      [bigint, bigint, bigint, string] & {
        networkInference: bigint;
        confidenceIntervalLowerBound: bigint;
        confidenceIntervalUpperBound: bigint;
        dataProvider: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getNetworkInferenceMessage"
  ): TypedContractMethod<
    [networkInferenceData: NetworkInferenceDataStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTopicValue"
  ): TypedContractMethod<
    [topicId: BigNumberish, extraData: BytesLike],
    [TopicValueStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyNetworkInference"
  ): TypedContractMethod<
    [nd: AlloraConsumerNetworkInferenceDataStruct],
    [
      [bigint, bigint, bigint, string] & {
        networkInference: bigint;
        confidenceIntervalLowerBound: bigint;
        confidenceIntervalUpperBound: bigint;
        aggregator: string;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyNetworkInferenceViewOnly"
  ): TypedContractMethod<
    [nd: AlloraConsumerNetworkInferenceDataStruct],
    [
      [bigint, bigint, bigint, string] & {
        networkInference: bigint;
        confidenceIntervalLowerBound: bigint;
        confidenceIntervalUpperBound: bigint;
        dataProvider: string;
      }
    ],
    "view"
  >;

  filters: {};
}
